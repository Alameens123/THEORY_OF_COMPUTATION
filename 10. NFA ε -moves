#include <stdio.h>
#include <stdlib.h>


#define MAX_STATES 10


struct Transition {
    int destination;
    char symbol;
};


struct State {
    int stateNumber;
    struct Transition transitions[MAX_STATES];
};


void epsilonClosure(int state, int nfa[MAX_STATES][MAX_STATES], int numStates, int closure[MAX_STATES]) {
    int visited[MAX_STATES] = {0};
    int stack[MAX_STATES];
    int top = -1;

    stack[++top] = state;
    closure[state] = 1;

    while (top != -1) {
        int currentState = stack[top--];

        for (int i = 0; i < numStates; ++i) {
            if (nfa[currentState][i] == 1 && !visited[i]) {
                stack[++top] = i;
                closure[i] = 1;
                visited[i] = 1;
            }
        }
    }
}


void computeEpsilonClosures(int nfa[MAX_STATES][MAX_STATES], int numStates, int epsilonClosures[MAX_STATES][MAX_STATES]) {
    for (int i = 0; i < numStates; ++i) {
        int closure[MAX_STATES] = {0};
        epsilonClosure(i, nfa, numStates, closure);

        for (int j = 0; j < numStates; ++j) {
            epsilonClosures[i][j] = closure[j];
        }
    }
}

// Function to display the ε-closure for all states
void displayEpsilonClosures(int numStates, int epsilonClosures[MAX_STATES][MAX_STATES]) {
    printf("Epsilon Closures:\n");

    for (int i = 0; i < numStates; ++i) {
        printf("ε-Closure(%d) = {", i);

        for (int j = 0; j < numStates; ++j) {
            if (epsilonClosures[i][j] == 1) {
                printf("%d, ", j);
            }
        }

        printf("}\n");
    }
}

int main() {
    int numStates;

    printf("Enter the number of states in the NFA: ");
    scanf("%d", &numStates);

    
    int nfa[MAX_STATES][MAX_STATES];

    printf("Enter the NFA transitions (1 for transition, 0 for no transition):\n");

    for (int i = 0; i < numStates; ++i) {
        printf("State %d:\n", i);

        for (int j = 0; j < numStates; ++j) {
            printf("Transition from state %d to state %d: ", i, j);
            scanf("%d", &nfa[i][j]);
        }
    }

   
    int epsilonClosures[MAX_STATES][MAX_STATES];
    computeEpsilonClosures(nfa, numStates, epsilonClosures);

   
    displayEpsilonClosures(numStates, epsilonClosures);

    return 0;
}
